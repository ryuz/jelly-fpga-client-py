# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import jelly_fpga_control_pb2 as jelly__fpga__control__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in jelly_fpga_control_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class JellyFpgaControlStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Reset = channel.unary_unary(
                '/jelly_fpga_control.JellyFpgaControl/Reset',
                request_serializer=jelly__fpga__control__pb2.ResetRequest.SerializeToString,
                response_deserializer=jelly__fpga__control__pb2.BoolResponse.FromString,
                _registered_method=True)
        self.Load = channel.unary_unary(
                '/jelly_fpga_control.JellyFpgaControl/Load',
                request_serializer=jelly__fpga__control__pb2.LoadRequest.SerializeToString,
                response_deserializer=jelly__fpga__control__pb2.LoadResponse.FromString,
                _registered_method=True)
        self.Unload = channel.unary_unary(
                '/jelly_fpga_control.JellyFpgaControl/Unload',
                request_serializer=jelly__fpga__control__pb2.UnloadRequest.SerializeToString,
                response_deserializer=jelly__fpga__control__pb2.BoolResponse.FromString,
                _registered_method=True)
        self.UploadFirmware = channel.stream_unary(
                '/jelly_fpga_control.JellyFpgaControl/UploadFirmware',
                request_serializer=jelly__fpga__control__pb2.UploadFirmwareRequest.SerializeToString,
                response_deserializer=jelly__fpga__control__pb2.BoolResponse.FromString,
                _registered_method=True)
        self.RemoveFirmware = channel.unary_unary(
                '/jelly_fpga_control.JellyFpgaControl/RemoveFirmware',
                request_serializer=jelly__fpga__control__pb2.RemoveFirmwareRequest.SerializeToString,
                response_deserializer=jelly__fpga__control__pb2.BoolResponse.FromString,
                _registered_method=True)
        self.LoadBitstream = channel.unary_unary(
                '/jelly_fpga_control.JellyFpgaControl/LoadBitstream',
                request_serializer=jelly__fpga__control__pb2.LoadBitstreamRequest.SerializeToString,
                response_deserializer=jelly__fpga__control__pb2.BoolResponse.FromString,
                _registered_method=True)
        self.LoadDtbo = channel.unary_unary(
                '/jelly_fpga_control.JellyFpgaControl/LoadDtbo',
                request_serializer=jelly__fpga__control__pb2.LoadDtboRequest.SerializeToString,
                response_deserializer=jelly__fpga__control__pb2.BoolResponse.FromString,
                _registered_method=True)
        self.DtsToDtb = channel.unary_unary(
                '/jelly_fpga_control.JellyFpgaControl/DtsToDtb',
                request_serializer=jelly__fpga__control__pb2.DtsToDtbRequest.SerializeToString,
                response_deserializer=jelly__fpga__control__pb2.DtsToDtbResponse.FromString,
                _registered_method=True)
        self.BitstreamToBin = channel.unary_unary(
                '/jelly_fpga_control.JellyFpgaControl/BitstreamToBin',
                request_serializer=jelly__fpga__control__pb2.BitstreamToBinRequest.SerializeToString,
                response_deserializer=jelly__fpga__control__pb2.BoolResponse.FromString,
                _registered_method=True)
        self.OpenMmap = channel.unary_unary(
                '/jelly_fpga_control.JellyFpgaControl/OpenMmap',
                request_serializer=jelly__fpga__control__pb2.OpenMmapRequest.SerializeToString,
                response_deserializer=jelly__fpga__control__pb2.OpenResponse.FromString,
                _registered_method=True)
        self.OpenUio = channel.unary_unary(
                '/jelly_fpga_control.JellyFpgaControl/OpenUio',
                request_serializer=jelly__fpga__control__pb2.OpenUioRequest.SerializeToString,
                response_deserializer=jelly__fpga__control__pb2.OpenResponse.FromString,
                _registered_method=True)
        self.OpenUdmabuf = channel.unary_unary(
                '/jelly_fpga_control.JellyFpgaControl/OpenUdmabuf',
                request_serializer=jelly__fpga__control__pb2.OpenUdmabufRequest.SerializeToString,
                response_deserializer=jelly__fpga__control__pb2.OpenResponse.FromString,
                _registered_method=True)
        self.Close = channel.unary_unary(
                '/jelly_fpga_control.JellyFpgaControl/Close',
                request_serializer=jelly__fpga__control__pb2.CloseRequest.SerializeToString,
                response_deserializer=jelly__fpga__control__pb2.BoolResponse.FromString,
                _registered_method=True)
        self.WriteMemU = channel.unary_unary(
                '/jelly_fpga_control.JellyFpgaControl/WriteMemU',
                request_serializer=jelly__fpga__control__pb2.WriteMemURequest.SerializeToString,
                response_deserializer=jelly__fpga__control__pb2.BoolResponse.FromString,
                _registered_method=True)
        self.WriteMemI = channel.unary_unary(
                '/jelly_fpga_control.JellyFpgaControl/WriteMemI',
                request_serializer=jelly__fpga__control__pb2.WriteMemIRequest.SerializeToString,
                response_deserializer=jelly__fpga__control__pb2.BoolResponse.FromString,
                _registered_method=True)
        self.ReadMemU = channel.unary_unary(
                '/jelly_fpga_control.JellyFpgaControl/ReadMemU',
                request_serializer=jelly__fpga__control__pb2.ReadMemRequest.SerializeToString,
                response_deserializer=jelly__fpga__control__pb2.ReadUResponse.FromString,
                _registered_method=True)
        self.ReadMemI = channel.unary_unary(
                '/jelly_fpga_control.JellyFpgaControl/ReadMemI',
                request_serializer=jelly__fpga__control__pb2.ReadMemRequest.SerializeToString,
                response_deserializer=jelly__fpga__control__pb2.ReadIResponse.FromString,
                _registered_method=True)
        self.WriteRegU = channel.unary_unary(
                '/jelly_fpga_control.JellyFpgaControl/WriteRegU',
                request_serializer=jelly__fpga__control__pb2.WriteRegURequest.SerializeToString,
                response_deserializer=jelly__fpga__control__pb2.BoolResponse.FromString,
                _registered_method=True)
        self.WriteRegI = channel.unary_unary(
                '/jelly_fpga_control.JellyFpgaControl/WriteRegI',
                request_serializer=jelly__fpga__control__pb2.WriteRegIRequest.SerializeToString,
                response_deserializer=jelly__fpga__control__pb2.BoolResponse.FromString,
                _registered_method=True)
        self.ReadRegU = channel.unary_unary(
                '/jelly_fpga_control.JellyFpgaControl/ReadRegU',
                request_serializer=jelly__fpga__control__pb2.ReadRegRequest.SerializeToString,
                response_deserializer=jelly__fpga__control__pb2.ReadUResponse.FromString,
                _registered_method=True)
        self.ReadRegI = channel.unary_unary(
                '/jelly_fpga_control.JellyFpgaControl/ReadRegI',
                request_serializer=jelly__fpga__control__pb2.ReadRegRequest.SerializeToString,
                response_deserializer=jelly__fpga__control__pb2.ReadIResponse.FromString,
                _registered_method=True)


class JellyFpgaControlServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Reset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Load(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadFirmware(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveFirmware(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadBitstream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadDtbo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DtsToDtb(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BitstreamToBin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenMmap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenUio(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenUdmabuf(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Close(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteMemU(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteMemI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadMemU(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadMemI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteRegU(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteRegI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadRegU(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadRegI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_JellyFpgaControlServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Reset': grpc.unary_unary_rpc_method_handler(
                    servicer.Reset,
                    request_deserializer=jelly__fpga__control__pb2.ResetRequest.FromString,
                    response_serializer=jelly__fpga__control__pb2.BoolResponse.SerializeToString,
            ),
            'Load': grpc.unary_unary_rpc_method_handler(
                    servicer.Load,
                    request_deserializer=jelly__fpga__control__pb2.LoadRequest.FromString,
                    response_serializer=jelly__fpga__control__pb2.LoadResponse.SerializeToString,
            ),
            'Unload': grpc.unary_unary_rpc_method_handler(
                    servicer.Unload,
                    request_deserializer=jelly__fpga__control__pb2.UnloadRequest.FromString,
                    response_serializer=jelly__fpga__control__pb2.BoolResponse.SerializeToString,
            ),
            'UploadFirmware': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadFirmware,
                    request_deserializer=jelly__fpga__control__pb2.UploadFirmwareRequest.FromString,
                    response_serializer=jelly__fpga__control__pb2.BoolResponse.SerializeToString,
            ),
            'RemoveFirmware': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveFirmware,
                    request_deserializer=jelly__fpga__control__pb2.RemoveFirmwareRequest.FromString,
                    response_serializer=jelly__fpga__control__pb2.BoolResponse.SerializeToString,
            ),
            'LoadBitstream': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadBitstream,
                    request_deserializer=jelly__fpga__control__pb2.LoadBitstreamRequest.FromString,
                    response_serializer=jelly__fpga__control__pb2.BoolResponse.SerializeToString,
            ),
            'LoadDtbo': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadDtbo,
                    request_deserializer=jelly__fpga__control__pb2.LoadDtboRequest.FromString,
                    response_serializer=jelly__fpga__control__pb2.BoolResponse.SerializeToString,
            ),
            'DtsToDtb': grpc.unary_unary_rpc_method_handler(
                    servicer.DtsToDtb,
                    request_deserializer=jelly__fpga__control__pb2.DtsToDtbRequest.FromString,
                    response_serializer=jelly__fpga__control__pb2.DtsToDtbResponse.SerializeToString,
            ),
            'BitstreamToBin': grpc.unary_unary_rpc_method_handler(
                    servicer.BitstreamToBin,
                    request_deserializer=jelly__fpga__control__pb2.BitstreamToBinRequest.FromString,
                    response_serializer=jelly__fpga__control__pb2.BoolResponse.SerializeToString,
            ),
            'OpenMmap': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenMmap,
                    request_deserializer=jelly__fpga__control__pb2.OpenMmapRequest.FromString,
                    response_serializer=jelly__fpga__control__pb2.OpenResponse.SerializeToString,
            ),
            'OpenUio': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenUio,
                    request_deserializer=jelly__fpga__control__pb2.OpenUioRequest.FromString,
                    response_serializer=jelly__fpga__control__pb2.OpenResponse.SerializeToString,
            ),
            'OpenUdmabuf': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenUdmabuf,
                    request_deserializer=jelly__fpga__control__pb2.OpenUdmabufRequest.FromString,
                    response_serializer=jelly__fpga__control__pb2.OpenResponse.SerializeToString,
            ),
            'Close': grpc.unary_unary_rpc_method_handler(
                    servicer.Close,
                    request_deserializer=jelly__fpga__control__pb2.CloseRequest.FromString,
                    response_serializer=jelly__fpga__control__pb2.BoolResponse.SerializeToString,
            ),
            'WriteMemU': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteMemU,
                    request_deserializer=jelly__fpga__control__pb2.WriteMemURequest.FromString,
                    response_serializer=jelly__fpga__control__pb2.BoolResponse.SerializeToString,
            ),
            'WriteMemI': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteMemI,
                    request_deserializer=jelly__fpga__control__pb2.WriteMemIRequest.FromString,
                    response_serializer=jelly__fpga__control__pb2.BoolResponse.SerializeToString,
            ),
            'ReadMemU': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadMemU,
                    request_deserializer=jelly__fpga__control__pb2.ReadMemRequest.FromString,
                    response_serializer=jelly__fpga__control__pb2.ReadUResponse.SerializeToString,
            ),
            'ReadMemI': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadMemI,
                    request_deserializer=jelly__fpga__control__pb2.ReadMemRequest.FromString,
                    response_serializer=jelly__fpga__control__pb2.ReadIResponse.SerializeToString,
            ),
            'WriteRegU': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteRegU,
                    request_deserializer=jelly__fpga__control__pb2.WriteRegURequest.FromString,
                    response_serializer=jelly__fpga__control__pb2.BoolResponse.SerializeToString,
            ),
            'WriteRegI': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteRegI,
                    request_deserializer=jelly__fpga__control__pb2.WriteRegIRequest.FromString,
                    response_serializer=jelly__fpga__control__pb2.BoolResponse.SerializeToString,
            ),
            'ReadRegU': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadRegU,
                    request_deserializer=jelly__fpga__control__pb2.ReadRegRequest.FromString,
                    response_serializer=jelly__fpga__control__pb2.ReadUResponse.SerializeToString,
            ),
            'ReadRegI': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadRegI,
                    request_deserializer=jelly__fpga__control__pb2.ReadRegRequest.FromString,
                    response_serializer=jelly__fpga__control__pb2.ReadIResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'jelly_fpga_control.JellyFpgaControl', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('jelly_fpga_control.JellyFpgaControl', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class JellyFpgaControl(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/jelly_fpga_control.JellyFpgaControl/Reset',
            jelly__fpga__control__pb2.ResetRequest.SerializeToString,
            jelly__fpga__control__pb2.BoolResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Load(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/jelly_fpga_control.JellyFpgaControl/Load',
            jelly__fpga__control__pb2.LoadRequest.SerializeToString,
            jelly__fpga__control__pb2.LoadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Unload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/jelly_fpga_control.JellyFpgaControl/Unload',
            jelly__fpga__control__pb2.UnloadRequest.SerializeToString,
            jelly__fpga__control__pb2.BoolResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadFirmware(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/jelly_fpga_control.JellyFpgaControl/UploadFirmware',
            jelly__fpga__control__pb2.UploadFirmwareRequest.SerializeToString,
            jelly__fpga__control__pb2.BoolResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveFirmware(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/jelly_fpga_control.JellyFpgaControl/RemoveFirmware',
            jelly__fpga__control__pb2.RemoveFirmwareRequest.SerializeToString,
            jelly__fpga__control__pb2.BoolResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoadBitstream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/jelly_fpga_control.JellyFpgaControl/LoadBitstream',
            jelly__fpga__control__pb2.LoadBitstreamRequest.SerializeToString,
            jelly__fpga__control__pb2.BoolResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoadDtbo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/jelly_fpga_control.JellyFpgaControl/LoadDtbo',
            jelly__fpga__control__pb2.LoadDtboRequest.SerializeToString,
            jelly__fpga__control__pb2.BoolResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DtsToDtb(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/jelly_fpga_control.JellyFpgaControl/DtsToDtb',
            jelly__fpga__control__pb2.DtsToDtbRequest.SerializeToString,
            jelly__fpga__control__pb2.DtsToDtbResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BitstreamToBin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/jelly_fpga_control.JellyFpgaControl/BitstreamToBin',
            jelly__fpga__control__pb2.BitstreamToBinRequest.SerializeToString,
            jelly__fpga__control__pb2.BoolResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OpenMmap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/jelly_fpga_control.JellyFpgaControl/OpenMmap',
            jelly__fpga__control__pb2.OpenMmapRequest.SerializeToString,
            jelly__fpga__control__pb2.OpenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OpenUio(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/jelly_fpga_control.JellyFpgaControl/OpenUio',
            jelly__fpga__control__pb2.OpenUioRequest.SerializeToString,
            jelly__fpga__control__pb2.OpenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OpenUdmabuf(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/jelly_fpga_control.JellyFpgaControl/OpenUdmabuf',
            jelly__fpga__control__pb2.OpenUdmabufRequest.SerializeToString,
            jelly__fpga__control__pb2.OpenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Close(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/jelly_fpga_control.JellyFpgaControl/Close',
            jelly__fpga__control__pb2.CloseRequest.SerializeToString,
            jelly__fpga__control__pb2.BoolResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WriteMemU(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/jelly_fpga_control.JellyFpgaControl/WriteMemU',
            jelly__fpga__control__pb2.WriteMemURequest.SerializeToString,
            jelly__fpga__control__pb2.BoolResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WriteMemI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/jelly_fpga_control.JellyFpgaControl/WriteMemI',
            jelly__fpga__control__pb2.WriteMemIRequest.SerializeToString,
            jelly__fpga__control__pb2.BoolResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadMemU(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/jelly_fpga_control.JellyFpgaControl/ReadMemU',
            jelly__fpga__control__pb2.ReadMemRequest.SerializeToString,
            jelly__fpga__control__pb2.ReadUResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadMemI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/jelly_fpga_control.JellyFpgaControl/ReadMemI',
            jelly__fpga__control__pb2.ReadMemRequest.SerializeToString,
            jelly__fpga__control__pb2.ReadIResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WriteRegU(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/jelly_fpga_control.JellyFpgaControl/WriteRegU',
            jelly__fpga__control__pb2.WriteRegURequest.SerializeToString,
            jelly__fpga__control__pb2.BoolResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WriteRegI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/jelly_fpga_control.JellyFpgaControl/WriteRegI',
            jelly__fpga__control__pb2.WriteRegIRequest.SerializeToString,
            jelly__fpga__control__pb2.BoolResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadRegU(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/jelly_fpga_control.JellyFpgaControl/ReadRegU',
            jelly__fpga__control__pb2.ReadRegRequest.SerializeToString,
            jelly__fpga__control__pb2.ReadUResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadRegI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/jelly_fpga_control.JellyFpgaControl/ReadRegI',
            jelly__fpga__control__pb2.ReadRegRequest.SerializeToString,
            jelly__fpga__control__pb2.ReadIResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
